Product-Part
=============
-> One2many - UniDirectional
-> Product has Parts. Parts do not know anything about Product.
-> Directionality does not change at RDBMS schema level. i.e.e same schema can be used for Bi-directional one2many relationship.
-> cascade level is important.
JPA: CascadeType.PERSIST does not propagate to collection (new entities)
     CascadeType.ALl, does work and saves new part in a product. But it also propagates CascadeType.DELETE.
-> You can add hibernate specific Cascade tyep...
   @Cascade(value = org.hibernate.annotations.CascadeType.SAVE_UPDATE) 

Action:
1. Why CascadeType.PERSIST alone does not work?
2. Other types of CascadeType across JPA/Hibernate

RDBMS Schema:
=============
(With @JoinColumn)
create table Part (id integer generated by default as identity (start with 1), name varchar(255), price double not null, product_id integer, primary key (id))
create table Product (serialNumber integer generated by default as identity (start with 1), name varchar(255), primary key (serialNumber))
alter table Part add constraint FK25D8139EF0378B foreign key (product_id) references Product

(With @JoinTable also when @JoinTable/@JoinColumn is not specified)
create table Part (id integer generated by default as identity (start with 1), name varchar(255), price double not null, primary key (id))
create table Product (serialNumber integer generated by default as identity (start with 1), name varchar(255), primary key (serialNumber))
create table Product_Part (Product_serialNumber integer not null, parts_id integer not null, primary key (Product_serialNumber, parts_id), unique (parts_id))
alter table Product_Part add constraint FK4633D583C82A043C foreign key (parts_id) references Part
alter table Product_Part add constraint FK4633D583CEF958AD foreign key (Product_serialNumber) references Product

-> By default foreign-key column is nullable
   Unidirectional One2Many (add nullable=false to enforce FK)
   Bidirectional One2Many its implied.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Customer_Order
==============
-> Bi-Directional Many2One is easier one ...
-> By default it uses FK relationship.
-> No need to mention JoinColumn

RDBMS schema:
=============
create table Customer (id integer generated by default as identity (start with 1), primary key (id))
create table Orders (id integer generated by default as identity (start with 1), orderDate timestamp, orderNumber integer, customer_id integer, primary key (id))
alter table Orders add constraint FK8D444F05F1AAC2D6 foreign key (customer_id) references Customer

Q: If I load just one of the Orders, how does it know/load the customer?
select orders0_.id as id3_1_, orders0_.customer_id as customer4_3_1_, orders0_.orderDate as orderDate3_1_, orders0_.orderNumber as orderNum3_3_1_, customer1_.id as id2_0_ from Orders orders0_ 
left outer join
Customer customer1_
on orders0_.customer_id=customer1_.id
where orders0_.id=?

or

select ord.*, cust.id as cid from orders ord, customer cust where
ord.customer_id=cust.id and ord.id=2;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using hashMap.
==============
@MapKey     //default map key will be PK of (many) entity.
->  Since PK is generated, you can put any unique value as key in this case.
-> While fetching it will map PK as key and instance as value.
-> Original keys will be ignored.
or
-> @MapKey(name = "jerseyNumber")  //You can specify any other unique column.


create table Player (id integer generated by default as identity (start with 1), jerseyNumber integer, name varchar(255), team_id integer, primary key (id), unique (team_id, jerseyNumber))
create table Team (id integer generated by default as identity (start with 1), color varchar(255), name varchar(255), primary key (id))
alter table Player add constraint FK8EA38701A0BA8C76 foreign key (team_id) references Team

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

One2Many BiDirectional with Many side as association owner.

Troop-Soldier
=============

-> Its just object level annotation change (the way you documentation relationship).
-> Underlying schema remains the same;

